**Folder Structure:**

```
├── app.js
├── routes
│   ├── index.js
│   └── users.js
├── models
│   ├── user.js
├── controllers
│   ├── user.js
├── config
│   ├── database.js
├── package.json
└── README.md
```

**README.md:**

```
# Node.js Web Backend Application

This project is a simple web backend application written in Node.js.

## Requirements

* Node.js v16 or later

## Installation

1. Clone the repository.
2. Install the dependencies: `npm install`
3. Start the application: `node app.js`

## Usage

The application has two routes:

* `/`: Returns a welcome message.
* `/users`: Returns a list of users.

## Folder Structure

The project is organized into the following folders:

* `app.js`: The main application file.
* `routes`: Contains the routing logic.
* `models`: Contains the database models.
* `controllers`: Contains the business logic.
* `config`: Contains the configuration files.
* `package.json`: The project's package manifest.
```

**app.js (Main Application File):**

```javascript
// Filename: app.js

const express = require('express');
const app = express();

// Import the routes
const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');

// Use the routes
app.use('/', indexRouter);
app.use('/users', usersRouter);

// Start the server
app.listen(3000, () => {
  console.log('Server listening on port 3000');
});
```

**routes/index.js (Index Route):**

```javascript
// Foldername: routes
// Filename: index.js

const express = require('express');
const router = express.Router();

// Define the GET route for the root URL
router.get('/', (req, res) => {
  res.send('Welcome to the Node.js web backend application!');
});

// Export the router
module.exports = router;
```

**routes/users.js (Users Route):**

```javascript
// Foldername: routes
// Filename: users.js

const express = require('express');
const router = express.Router();

// Define the GET route for the /users URL
router.get('/', (req, res) => {
  res.send(['Alice', 'Bob', 'Charlie']);
});

// Export the router
module.exports = router;
```

**models/user.js (User Model):**

```javascript
// Foldername: models
// Filename: user.js

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
});

const User = mongoose.model('User', userSchema);

module.exports = User;
```

**controllers/user.js (User Controller):**

```javascript
// Foldername: controllers
// Filename: user.js

const User = require('../models/user');

const createUser = async (req, res) => {
  const user = new User({
    name: req.body.name,
    email: req.body.email,
  });

  await user.save();

  res.send(user);
};

const getAllUsers = async (req, res) => {
  const users = await User.find();

  res.send(users);
};

module.exports = {
  createUser,
  getAllUsers,
};
```

**config/database.js (Database Configuration):**

```javascript
// Foldername: config
// Filename: database.js

const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/web-backend', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

module.exports = mongoose;
```

**package.json:**

```json
{
  "name": "web-backend-app",
  "version": "1.0.0",
  "description": "A simple Node.js web backend application.",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "test": "mocha"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.19.0",
    "express": "^4.17.1",
    "mongoose": "^6.1.5"
  },
  "devDependencies": {
    "mocha": "^9.2.0"
  }
}
```
**Folder Structure:**

- backend
  - app.js
  - config
    - database.js
    - environment.js
  - controllers
    - example.controller.js
  - middleware
    - body-parser.middleware.js
    - cors.middleware.js
    - helmet.middleware.js
    - rate-limit.middleware.js
  - models
    - example.model.js
  - routes
    - example.routes.js
  - services
    - example.service.js
  - utils
    - data-validation.js
  - package.json
  - README.md

**README.md:**

```
## Node.js Web Backend Project

### Prerequisites:

- Node.js and npm installed

### Setup:

1. Clone the repository.
2. Install dependencies: `npm install`.
3. Create a `.env` file in the `config` folder and add your database connection details.

### Running the Project:

1. Start the application: `npm start`.
2. Access the API endpoint: `http://localhost:3000/example`.

### Testing:

1. Run unit tests: `npm test`.

### Deployment:

1. Use PM2 or Docker to deploy the application to a production environment.
```

**app.js:**

```javascript
// Foldername: backend
// Filename: app.js

const express = require('express');
const bodyParser = require('body-parser');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const logger = require('morgan');

const app = express();

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(helmet());
app.use(cors());
app.use(rateLimit({ windowMs: 60000, max: 100 })); // Limit requests to 100 per minute
app.use(logger('dev'));

// Routes
app.use('/example', require('./routes/example.routes'));

// Start the server
app.listen(3000, () => {
  console.log('Server listening on port 3000');
});
```

**config/database.js:**

```javascript
// Foldername: backend/config
// Filename: database.js

const mongoose = require('mongoose');

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
```

**config/environment.js:**

```javascript
// Foldername: backend/config
// Filename: environment.js

// Load environment variables from .env file
require('dotenv').config();
```

**controllers/example.controller.js:**

```javascript
// Foldername: backend/controllers
// Filename: example.controller.js

const exampleService = require('../services/example.service');

// Example controller
const example = async (req, res) => {
  const data = await exampleService.getExampleData();
  res.json(data);
};
```

**middleware/body-parser.middleware.js:**

```javascript
// Foldername: backend/middleware
// Filename: body-parser.middleware.js

const bodyParser = require('body-parser');

// Middleware for parsing request bodies
const bodyParseMiddleware = bodyParser.json();
```

**middleware/cors.middleware.js:**

```javascript
// Foldername: backend/middleware
// Filename: cors.middleware.js

const cors = require('cors');

// Middleware for enabling CORS
const corsMiddleware = cors();
```

**middleware/helmet.middleware.js:**

```javascript
// Foldername: backend/middleware
// Filename: helmet.middleware.js

const helmet = require('helmet');

// Middleware for HTTP security
const helmetMiddleware = helmet();
```

**middleware/rate-limit.middleware.js:**

```javascript
// Foldername: backend/middleware
// Filename: rate-limit.middleware.js

const rateLimit = require('express-rate-limit');

// Middleware for rate limiting requests
const rateLimitMiddleware = rateLimit({ windowMs: 60000, max: 100 });
```

**models/example.model.js:**

```javascript
// Foldername: backend/models
// Filename: example.model.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Example schema
const exampleSchema = new Schema({
  name: String,
});

// Create the model
const Example = mongoose.model('Example', exampleSchema);

module.exports = Example;
```

**routes/example.routes.js:**

```javascript
// Foldername: backend/routes
// Filename: example.routes.js

const express = require('express');
const exampleController = require('../controllers/example.controller');

const router = express.Router();

// Example route
router.get('/', exampleController.example);

module.exports = router;
```

**services/example.service.js:**

```javascript
// Foldername: backend/services
// Filename: example.service.js

const Example = require('../models/example.model');

// Example service
const exampleService = {
  async getExampleData() {
    // Fetch data from the database
    const data = await Example.find();
    return data;
  },
};

module.exports = exampleService;
```

**utils/data-validation.js:**

```javascript
// Foldername: backend/utils
// Filename: data-validation.js

const Joi = require('joi');

// Example data validation schema
const exampleSchema = Joi.object({
  name: Joi.string().required(),
});

// Data validation function
const validateData = (data, schema) => {
  const { error } = schema.validate(data);
  if (error) throw new Error(error.message);
};
```

**package.json:**

```json
{
  "name": "node-web-backend",
  "version": "1.0.0",
  "description": "Node.js Web Backend Project",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "test": "mocha"
  },
  "dependencies": {
    "body-parser": "^1.19.1",
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "express": "^4.18.1",
    "express-rate-limit": "^5.2.2",
    "helmet": "^4.6.4",
    "joi": "^17.6.0",
    "mongoose": "^6.4.1",
    "morgan": "^1.14.1"
  },
  "devDependencies": {
    "mocha": "^10.0.0"
  }
}
```
## Folder Structure

```
// Project Root
├── README.md
├── package.json
├── package-lock.json
├── src
│   ├── app.js
│   ├── controllers
│   │   ├── user.controller.js
│   ├── middleware
│   │   ├── auth.middleware.js
│   │   ├── error.middleware.js
│   ├── models
│   │   ├── user.model.js
│   ├── routes
│   │   ├── user.routes.js
│   ├── services
│   │   ├── user.service.js
├── Dockerfile
```

## Code Implementation

**package.json**

```json
{
  "name": "nodejs-web-backend",
  "version": "1.0.0",
  "description": "Node.js Web Backend Project",
  "main": "src/app.js",
  "scripts": {
    "start": "nodemon src/app.js",
    "test": "jest"
  },
  "dependencies": {
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "express": "^4.17.1",
    "helmet": "^4.5.0",
    "jo"
```

**app.js**

```javascript
// Foldername: src
// Filename: app.js

const express = require('express');
const app = express();

// Middleware
const bodyParser = require('body-parser');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');

// Database
const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost:27017/nodejs-web-backend', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Routes
const userRoutes = require('./routes/user.routes');

// Middleware
app.use(bodyParser.json());
app.use(cors());
app.use(helmet());
app.use(morgan('dev'));

// Routes
app.use('/api/users', userRoutes);

// Start server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
```

**user.controller.js**

```javascript
// Foldername: src/controllers
// Filename: user.controller.js

const { User } = require('../models/user.model');

const createUser = async (req, res) => {
  const newUser = new User(req.body);
  const savedUser = await newUser.save();
  res.status(201).json(savedUser);
};

const getAllUsers = async (req, res) => {
  const users = await User.find();
  res.status(200).json(users);
};

const getUserById = async (req, res) => {
  const user = await User.findById(req.params.id);
  if (!user) return res.status(404).json({ message: 'User not found' });
  res.status(200).json(user);
};

const updateUserById = async (req, res) => {
  const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });
  if (!user) return res.status(404).json({ message: 'User not found' });
  res.status(200).json(user);
};

const deleteUserById = async (req, res) => {
  const user = await User.findByIdAndDelete(req.params.id);
  if (!user) return res.status(404).json({ message: 'User not found' });
  res.status(200).json({ message: 'User deleted successfully' });
};

module.exports = {
  createUser,
  getAllUsers,
  getUserById,
  updateUserById,
  deleteUserById
};
```

**user.model.js**

```javascript
// Foldername: src/models
// Filename: user.model.js

const { Schema, model } = require('mongoose');

const userSchema = new Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

const User = model('User', userSchema);

module.exports = {
  User
};
```

**user.routes.js**

```javascript
// Foldername: src/routes
// Filename: user.routes.js

const express = require('express');
const router = express.Router();
const userController = require('../controllers/user.controller');

// Routes
router.post('/', userController.createUser);
router.get('/', userController.getAllUsers);
router.get('/:id', userController.getUserById);
router.put('/:id', userController.updateUserById);
router.delete('/:id', userController.deleteUserById);

module.exports = router;
```

## README.md

```
## Node.js Web Backend Project

### Setup

1. Install Node.js and npm.
2. Clone the project repository.
3. Run `npm install` to install dependencies.

### Running the Project

1. Start the server by running `npm start`.
2. Navigate to `http://localhost:3000` in your browser to test the API.

### Usage

```
// Create a new user
fetch('http://localhost:3000/api/users', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    name: 'John Doe',
    email: 'johndoe@example.com',
    password: 'password'
  })
})
.then(res => res.json())
.then(data => console.log(data))
.catch(error => console.error(error));

// Get all users
fetch('http://localhost:3000/api/users')
.then(res => res.json())
.then(data => console.log(data))
.catch(error => console.error(error));

// Get a user by ID
fetch('http://localhost:3000/api/users/:id')
.then(res => res.json())
.then(data => console.log(data))
.catch(error => console.error(error));

// Update a user by ID
fetch('http://localhost:3000/api/users/:id', {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    name: 'John Doe',
    email: 'johndoe@example.com',
    password: 'password'
  })
})
.then(res => res.json())
.then(data => console.log(data))
.catch(error => console.error(error));

// Delete a user by ID
fetch('http://localhost:3000/api/users/:id', {
  method: 'DELETE'
})
.then(res => res.json())
.then(data => console.log(data))
.catch(error => console.error(error));
```
```
